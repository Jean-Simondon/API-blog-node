TODO :
	cors (pour des requêtes d’api à api)
	isAuthor ?
	Ne pas renvoyer le mot de passe
	Crypter le mot de passe (bcrypt, 
	Gérer l’unicité de l’adresse email
	Vérifier existence user avant modification ou autre






TP NOTE :
Créez une API de gestion d'article pour un blog. Cette API doit contenir:

ARTICLE :
une route pour récupérer un article <--- OK
une route pour récupérer la liste des articles <--- OK
une route pour ajouter un article <--- OK
une route pour supprimer un article <--- OK
une route pour modifier un article <--- OK

PROTECTION DES ROUTES :
Les routes liées à la creation/suppression/modification d'articles doivent être uniquement accessibles aux personnes connectés. <--- OK
La seule personne pouvant modifier ou supprimer un article doit être la personne qui l'a créé.

USER :
une route pour récupérer un utilisateur <--- OK
une route pour récupérer la liste des utilisateurs <--- OK
une route pour créer un compte utilisateur <--- OK
une route pour supprimer un compte utilisateur <--- OK
une route pour modifier un compte utilisateur <--- OK

AUTHENTIFICATION :
Le système d'authentification doit être fait avec les librairies utilisées en TP (passport et passport-jwt).
une route pour se connecter (récupérer un JWT)

DATABASE :
Les utilisateurs ainsi que les articles seront stockés dans restdb comme vu en TP.

HEBERGEMENT :
Le projet doit être déployé sur Heroku.

AUTRE SPECIFICATION :
Utiliser le middleware CORS pour permettre l'usage d'API d'un autre domaine
l'api doit communiquer uniquement en JSON (res.json avec express). ATTENTION 2: pour communiquer avec votre serveur express depuis une page web, vous aurez besoin de gérer les CORS. voir le middleware express cors

FORMAT DU RENDU :
l'URL d'un github contenant les sources de votre projet ainsi qu'un readme qui explique comment lancer/installer le projet.
l'URL de votre API + l'url de l'application finale (avec la partie Vue.js)





Bcryot ou md5